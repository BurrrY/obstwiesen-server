package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/BurrrY/obstwiesen-server/graph/model"
	gonanoid "github.com/matoous/go-nanoid/v2"
	log "github.com/sirupsen/logrus"
)

// Trees is the resolver for the trees field.
func (r *meadowResolver) Trees(ctx context.Context, obj *model.Meadow) ([]*model.Tree, error) {
	var meadows []*model.Tree
	meadows, err := storage.GetTreesOfMeadow(obj.ID)
	return meadows, err
}

// CreateMeadow is the resolver for the createMeadow field.
func (r *mutationResolver) CreateMeadow(ctx context.Context, input model.NewMeadow) (*model.Meadow, error) {
	id, _ := gonanoid.New()

	meadow := &model.Meadow{
		ID:    id,
		Name:  input.Name,
		Trees: nil,
	}
	storage.StoreMeadow(meadow)
	return meadow, nil
}

// CreateTree is the resolver for the createTree field.
func (r *mutationResolver) CreateTree(ctx context.Context, input model.NewTree) (*model.Tree, error) {
	id, _ := gonanoid.New()

	tree := &model.Tree{
		ID:   id,
		Name: input.Name,
	}

	storage.AddTree(tree, input.MeadowID)
	return tree, nil
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	id, _ := gonanoid.New()

	elemnt := &model.Event{
		ID:          id,
		Title:       input.Title,
		Description: input.Description,
		Timestamp:   input.Timestamp,
	}

	err := storage.AddEvent(elemnt, input.ParentID)
	return elemnt, err
}

// Meadow is the resolver for the meadow field.
func (r *queryResolver) Meadow(ctx context.Context, meadowID string) (*model.Meadow, error) {
	var meadow *model.Meadow
	meadow, err := storage.GetMeadowByID(meadowID)
	return meadow, err
}

// Meadows is the resolver for the meadows field.
func (r *queryResolver) Meadows(ctx context.Context) ([]*model.Meadow, error) {
	var meadows []*model.Meadow
	meadows, err := storage.GetMeadows()
	return meadows, err
}

// Trees is the resolver for the trees field.
func (r *queryResolver) Trees(ctx context.Context, meadowID string) ([]*model.Tree, error) {
	var trees []*model.Tree
	trees, err := storage.GetTreesOfMeadow(meadowID)
	return trees, err
}

// Tree is the resolver for the tree field.
func (r *queryResolver) Tree(ctx context.Context, treeID string) (*model.Tree, error) {
	var tree *model.Tree
	log.Info("Tree requestd", treeID)
	tree, err := storage.GetTreeByID(treeID)
	return tree, err
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, treeID string) ([]*model.Event, error) {
	var elem []*model.Event
	elem, err := storage.GetEventsOfTree(treeID)
	return elem, err
}

// Events is the resolver for the events field.
func (r *treeResolver) Events(ctx context.Context, obj *model.Tree) ([]*model.Event, error) {
	var elem []*model.Event
	elem, err := storage.GetEventsOfTree(obj.ID)
	return elem, err
}

// Meadow returns MeadowResolver implementation.
func (r *Resolver) Meadow() MeadowResolver { return &meadowResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Tree returns TreeResolver implementation.
func (r *Resolver) Tree() TreeResolver { return &treeResolver{r} }

type meadowResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type treeResolver struct{ *Resolver }
