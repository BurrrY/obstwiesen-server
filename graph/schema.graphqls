scalar Upload

type Meadow {
  id: ID!
  name: String!
  trees: [Tree!]!
  events: [Event!]
  banner: File
}

type Tree {
  id: ID!
  name: String!
  lat: Float
  lang: Float
  events: [Event!]
  banner: File
}

input TreeInput {
  name: String!
  lat: Float
  lang: Float
}

type Event {
  id: ID!
  parentID: ID!
  title: String!
  description: String!
  timestamp: String!
  files: [File!]
}


input NewMeadow {
  name: String!
}

input NewTree {
  name: String!
  meadowID: String!
}


input NewEvent {
  parentID: String!
  title: String!
  timestamp: String!
  description: String
  files: [Upload!]
}

"The `File` type, represents the response of uploading a file."
type File {
  parentID: String!
  path: String!
}

"The `UploadFile` type, represents the request for uploading a file with a certain payload."
input UploadFile {
  id: Int!
  file: Upload!
}

type Mutation {
  createMeadow(input: NewMeadow!): Meadow!
  createTree(input: NewTree!): Tree!
  updateTree(id: ID!, input: TreeInput!): Tree!
  createEvent(input: NewEvent!): Event!
  singleUpload(parentID: ID!, file: Upload!): File!
  multipleUpload(parentID: ID!, files: [Upload!]!): [File!]!
}

type Query {
  meadow(meadow_id: ID!): Meadow
  meadows: [Meadow!]!
  trees(meadow_id: String!): [Tree!]!
  tree(tree_id: ID!): Tree
  events(tree_id: String!): [Event!]!
}